executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.CloneGit:REPOSITORY_PATH is:: /vagrant/Demo/Ashok-Kumar-Venaktesh-ReverseProxyConfig-masterCloneGit:Git clone from stderr:: Cloning into 'ReverseProxyConfig'...
CloneGit:Done git clone
deployProject:dockerComposeCommand.stderr::Building site2
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> a55cf3185b79
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4d52e62e7473
deployProject:dockerComposeCommand.stdout::Successfully built 4d52e62e7473
deployProject:dockerComposeCommand.stderr::Building site1
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4a6bfcd0a88d
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> e07d65339cd7
deployProject:dockerComposeCommand.stdout::Successfully built e07d65339cd7
deployProject:dockerComposeCommand.stderr::Building proxy
deployProject:dockerComposeCommand.stdout::Step 1 : FROM smebberson/alpine-nginx:3.0.0
deployProject:dockerComposeCommand.stdout:: ---> 5473ded7a8f3
deployProject:dockerComposeCommand.stdout::Step 2 : ADD root /
 ---> Using cache
 ---> da92dc5a31fa
Successfully built da92dc5a31fa
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site2_1
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_36
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_10
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_8
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_9
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_6
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_7
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_4
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_3
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_5
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_2
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_1
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_proxy_1
Closer of docker compose.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.CloneGit:REPOSITORY_PATH is:: /vagrant/Demo/Ashok-Kumar-Venaktesh-ReverseProxyConfig-masterCloneGit:Git clone from stderr:: fatal: destination path 'ReverseProxyConfig' already exists and is not an empty directory.
CloneGit:Done git clone
deployProject:dockerComposeCommand.stderr::Creating network "reverseproxyconfig_default" with the default driver
deployProject:dockerComposeCommand.stderr::Building site2
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> a55cf3185b79
deployProject:dockerComposeCommand.stdout:: ---> 4d52e62e7473
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout::Successfully built 4d52e62e7473
deployProject:dockerComposeCommand.stderr::Building site1
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4a6bfcd0a88d
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> e07d65339cd7
deployProject:dockerComposeCommand.stdout::Successfully built e07d65339cd7
deployProject:dockerComposeCommand.stderr::Building proxy
deployProject:dockerComposeCommand.stdout::Step 1 : FROM smebberson/alpine-nginx:3.0.0
deployProject:dockerComposeCommand.stdout:: ---> 5473ded7a8f3
deployProject:dockerComposeCommand.stdout::Step 2 : ADD root /
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> da92dc5a31fa
deployProject:dockerComposeCommand.stdout::Successfully built da92dc5a31fa
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site1_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site2_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_proxy_1
Closer of docker compose.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.CloneGit:REPOSITORY_PATH is:: /vagrant/Demo/Ashok-Kumar-Venaktesh-ReverseProxyConfig-masterCloneGit:Git clone from stderr:: fatal: destination path 'ReverseProxyConfig' already exists and is not an empty directory.
CloneGit:Done git clone
deployProject:dockerComposeCommand.stderr::Creating network "reverseproxyconfig_default" with the default driver
deployProject:dockerComposeCommand.stderr::Building site2
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
 ---> Using cache
 ---> 4d52e62e7473
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> a55cf3185b79
deployProject:dockerComposeCommand.stdout::Successfully built 4d52e62e7473
deployProject:dockerComposeCommand.stderr::Building site1
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4a6bfcd0a88d
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
 ---> e07d65339cd7
Successfully built e07d65339cd7
deployProject:dockerComposeCommand.stderr::Building proxy
deployProject:dockerComposeCommand.stdout::Step 1 : FROM smebberson/alpine-nginx:3.0.0
deployProject:dockerComposeCommand.stdout:: ---> 5473ded7a8f3
deployProject:dockerComposeCommand.stdout::Step 2 : ADD root /
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> da92dc5a31fa
deployProject:dockerComposeCommand.stdout::Successfully built da92dc5a31fa
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site2_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site1_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_proxy_1
Closer of docker compose.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.CloneGit:REPOSITORY_PATH is:: /vagrant/Demo/Ashok-Kumar-Venaktesh-ReverseProxyConfig-masterCloneGit:Git clone from stderr:: fatal: destination path 'ReverseProxyConfig' already exists and is not an empty directory.
CloneGit:Done git clone
deployProject:dockerComposeCommand.stderr::Creating network "reverseproxyconfig_default" with the default driver
deployProject:dockerComposeCommand.stderr::Building site2
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
 ---> Using cache
 ---> 9224b1794129
Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> a55cf3185b79
Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4d52e62e7473
deployProject:dockerComposeCommand.stdout::Successfully built 4d52e62e7473
deployProject:dockerComposeCommand.stderr::Building site1
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4a6bfcd0a88d
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> e07d65339cd7
deployProject:dockerComposeCommand.stdout::Successfully built e07d65339cd7
deployProject:dockerComposeCommand.stderr::Building proxy
deployProject:dockerComposeCommand.stdout::Step 1 : FROM smebberson/alpine-nginx:3.0.0
deployProject:dockerComposeCommand.stdout:: ---> 5473ded7a8f3
deployProject:dockerComposeCommand.stdout::Step 2 : ADD root /
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> da92dc5a31fa
deployProject:dockerComposeCommand.stdout::Successfully built da92dc5a31fa
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site2_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site1_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_proxy_1
Closer of docker compose.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.CloneGit:REPOSITORY_PATH is:: /vagrant/Demo/Ashok-Kumar-Venaktesh-ReverseProxyConfig-masterCloneGit:Git clone from stderr:: fatal: destination path 'ReverseProxyConfig' already exists and is not an empty directory.
CloneGit:Done git clone
deployProject:dockerComposeCommand.stderr::Creating network "reverseproxyconfig_default" with the default driver
deployProject:dockerComposeCommand.stderr::Building site2
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> a55cf3185b79
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4d52e62e7473
deployProject:dockerComposeCommand.stdout::Successfully built 4d52e62e7473
deployProject:dockerComposeCommand.stderr::Building site1
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4a6bfcd0a88d
Step 4 : CMD http-server --port 8080
 ---> Using cache
 ---> e07d65339cd7
deployProject:dockerComposeCommand.stdout::Successfully built e07d65339cd7
deployProject:dockerComposeCommand.stderr::Building proxy
deployProject:dockerComposeCommand.stdout::Step 1 : FROM smebberson/alpine-nginx:3.0.0
deployProject:dockerComposeCommand.stdout:: ---> 5473ded7a8f3
deployProject:dockerComposeCommand.stdout::Step 2 : ADD root /
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> da92dc5a31fa
deployProject:dockerComposeCommand.stdout::Successfully built da92dc5a31fa
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site2_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site1_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_proxy_1
Closer of docker compose.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.CloneGit:REPOSITORY_PATH is:: /vagrant/Demo/Ashok-Kumar-Venaktesh-ReverseProxyConfig-masterCloneGit:Git clone from stderr:: fatal: destination path 'ReverseProxyConfig' already exists and is not an empty directory.
CloneGit:Done git clone
deployProject:dockerComposeCommand.stderr::Creating network "reverseproxyconfig_default" with the default driver
deployProject:dockerComposeCommand.stderr::Building site2
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> a55cf3185b79
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4d52e62e7473
deployProject:dockerComposeCommand.stdout::Successfully built 4d52e62e7473
deployProject:dockerComposeCommand.stderr::Building site1
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4a6bfcd0a88d
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> e07d65339cd7
deployProject:dockerComposeCommand.stdout::Successfully built e07d65339cd7
deployProject:dockerComposeCommand.stderr::Building proxy
deployProject:dockerComposeCommand.stdout::Step 1 : FROM smebberson/alpine-nginx:3.0.0
deployProject:dockerComposeCommand.stdout:: ---> 5473ded7a8f3
deployProject:dockerComposeCommand.stdout::Step 2 : ADD root /
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> da92dc5a31fa
deployProject:dockerComposeCommand.stdout::Successfully built da92dc5a31fa
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site2_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site1_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_proxy_1
Closer of docker compose.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.CloneGit:REPOSITORY_PATH is:: /vagrant/Demo/-ReverseProxyConfig-masterCloneGit:Git clone from stderr:: Cloning into 'ReverseProxyConfig'...
CloneGit:Done git clone
deployProject:dockerComposeCommand.stderr::Creating network "reverseproxyconfig_default" with the default driver
deployProject:dockerComposeCommand.stderr::Building site2
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
 ---> Using cache
 ---> 9224b1794129
Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> a55cf3185b79
Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> 4d52e62e7473
deployProject:dockerComposeCommand.stderr::Building site1
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout::Successfully built 4d52e62e7473
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4a6bfcd0a88d
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> e07d65339cd7
deployProject:dockerComposeCommand.stdout::Successfully built e07d65339cd7
deployProject:dockerComposeCommand.stderr::Building proxy
deployProject:dockerComposeCommand.stdout::Step 1 : FROM smebberson/alpine-nginx:3.0.0
deployProject:dockerComposeCommand.stdout:: ---> 5473ded7a8f3
deployProject:dockerComposeCommand.stdout::Step 2 : ADD root /
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> da92dc5a31fa
deployProject:dockerComposeCommand.stdout::Successfully built da92dc5a31fa
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site1_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site2_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_proxy_1
Closer of docker compose.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.CloneGit:REPOSITORY_PATH is:: /vagrant/Demo/Ashok-Kumar-Venaktesh-ReverseProxyConfig-masterCloneGit:Git clone from stderr:: fatal: destination path 'ReverseProxyConfig' already exists and is not an empty directory.
CloneGit:Done git clone
deployProject:dockerComposeCommand.stderr::Building site2
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> a55cf3185b79
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4d52e62e7473
deployProject:dockerComposeCommand.stdout::Successfully built 4d52e62e7473
deployProject:dockerComposeCommand.stderr::Building site1
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4a6bfcd0a88d
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> e07d65339cd7
deployProject:dockerComposeCommand.stdout::Successfully built e07d65339cd7
deployProject:dockerComposeCommand.stderr::Building proxy
deployProject:dockerComposeCommand.stdout::Step 1 : FROM smebberson/alpine-nginx:3.0.0
deployProject:dockerComposeCommand.stdout:: ---> 5473ded7a8f3
deployProject:dockerComposeCommand.stdout::Step 2 : ADD root /
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> da92dc5a31fa
deployProject:dockerComposeCommand.stdout::Successfully built da92dc5a31fa
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site2_1
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_site1_1
deployProject:dockerComposeCommand.stderr::Recreating reverseproxyconfig_proxy_1
executing body-parser.Closer of docker compose.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.executing body-parser.CloneGit:REPOSITORY_PATH is:: /vagrant/Demo/Ashok-Kumar-Venaktesh-ReverseProxyConfig-masterCloneGit:Git clone from stderr:: fatal: destination path 'ReverseProxyConfig' already exists and is not an empty directory.
CloneGit:Done git clone
deployProject:dockerComposeCommand.stderr::Creating network "reverseproxyconfig_default" with the default driver
deployProject:dockerComposeCommand.stderr::Building site2
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
 ---> a55cf3185b79
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 4d52e62e7473
deployProject:dockerComposeCommand.stdout::Successfully built 4d52e62e7473
deployProject:dockerComposeCommand.stderr::Building site1
deployProject:dockerComposeCommand.stdout::Step 1 : FROM mhart/alpine-node:6.3.0
deployProject:dockerComposeCommand.stdout:: ---> fffb49210fed
deployProject:dockerComposeCommand.stdout::Step 2 : RUN npm install -g http-server
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> 9224b1794129
deployProject:dockerComposeCommand.stdout::Step 3 : COPY index.html .
deployProject:dockerComposeCommand.stdout:: ---> Using cache
 ---> 4a6bfcd0a88d
deployProject:dockerComposeCommand.stdout::Step 4 : CMD http-server --port 8080
deployProject:dockerComposeCommand.stdout:: ---> Using cache
 ---> e07d65339cd7
deployProject:dockerComposeCommand.stdout::Successfully built e07d65339cd7
deployProject:dockerComposeCommand.stderr::Building proxy
deployProject:dockerComposeCommand.stdout::Step 1 : FROM smebberson/alpine-nginx:3.0.0
deployProject:dockerComposeCommand.stdout:: ---> 5473ded7a8f3
deployProject:dockerComposeCommand.stdout::Step 2 : ADD root /
deployProject:dockerComposeCommand.stdout:: ---> Using cache
deployProject:dockerComposeCommand.stdout:: ---> da92dc5a31fa
deployProject:dockerComposeCommand.stdout::Successfully built da92dc5a31fa
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site2_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_site1_1
deployProject:dockerComposeCommand.stderr::Creating reverseproxyconfig_proxy_1
Closer of docker compose.executing body-parser.executing body-parser.executing body-parser.executing body-parser.